import { Logger } from "./logger";
import { init } from "./lib/init";
import { toSnakeCase, toSnakeCaseCached, toCamelCase, toCamelCaseCached, encrypt, decrypt, sanitizePhone, formatPhone, formatPrice, formatNumber, getProtocolAndHostname, getHostname, formatAddress, formatCap, splitFullName } from "./lib/transformations";
import { create, update, fetchOne, fetchMany, createOne, updateOne } from "./lib/queries";
export { $ConnectionOptsType, $Config, $LoggerInterface } from "./types";
declare const _default: {
    db: any;
    cache: any;
    Logger: typeof Logger;
    init: typeof init;
    toSnakeCase: typeof toSnakeCase;
    toSnakeCaseCached: typeof toSnakeCaseCached;
    toCamelCase: typeof toCamelCase;
    toCamelCaseCached: typeof toCamelCaseCached;
    encrypt: typeof encrypt;
    decrypt: typeof decrypt;
    sanitizePhone: typeof sanitizePhone;
    formatPhone: typeof formatPhone;
    formatPrice: typeof formatPrice;
    formatNumber: typeof formatNumber;
    getProtocolAndHostname: typeof getProtocolAndHostname;
    getHostname: typeof getHostname;
    formatAddress: typeof formatAddress;
    formatCap: typeof formatCap;
    splitFullName: typeof splitFullName;
    create: typeof create;
    update: typeof update;
    fetchOne: typeof fetchOne;
    fetchMany: typeof fetchMany;
    createOne: typeof createOne;
    updateOne: typeof updateOne;
};
export default _default;
